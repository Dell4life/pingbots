const Discord = require('discord.js');
const { diff } = require('semver');
const client = new Discord.Client();
const { prefix, token, activity } = require('/home/optiplex/DiscordBot/config1.json');

function check() {
  if (prefix === undefined || token === undefined) {
    throw new Error('You must have a prefix, token, and activity object in config1.json!')
  }
}

function generateEmbed(color, title, authorName, authorLink, authorImg, description, footerText, footerImg) {
	// Create embed using parameters
    var generatedEmbed = new Discord.MessageEmbed()
		.setColor(color)
		.setTitle(title)
		.setAuthor(authorName, authorImg, authorLink)
		.setDescription(description)
		.setTimestamp()
		.setFooter(footerText, footerImg);
		
	// Return generated embed
    return generatedEmbed;
}

client.once('ready', () => {
    console.log("connected as " + client.user.tag)
    client.user.setActivity(activity)
});

//nyooom!
client.on('message', message => {
	if (!message.content.startsWith(prefix) || message.author.bot) return;

	const args = message.content.slice(prefix.length).split(/ +/);
	const command = args.shift().toLowerCase();

	if (command === 'ping1') {
	//we need to fix client.ping
		var ping = client.ws.ping + " ms";
    console.log(`client object ping: ${ping}`);
    message.channel.send('Client object ping:')
    message.channel.send(ping);
  
	//Another way of finding ping
  } else if (command === 'ping2') {
    var ping = Date.now() - message.createdTimestamp + " ms";
    console.log(`message object ping: ${ping}`);
    message.channel.send('Message object ping:')
    message.channel.send(ping);
  
	//Error while creating embed
  } else if (command === 'ping3embed') {
		// Get current date as number to calculate ping
		var startPing = Date.now();
		// Generate ping embed that does not have ping in it, as ping has not been calculated yet
		var pingMsg1 = generateEmbed("#cc3d32", ":ping_pong: Pong!", embedAuthor, embedLink, embedImg, "Getting ms... Please wait...", `Generated by ${author.username}#${author.discriminator}`, author.displayAvatarURL({ dynamic: true }));

		// Edit sent message
		msg.channel.send(pingMsg1).then((sentMessage) => {
			// Calculate ping
			var endPing = Date.now();
			var diffPing = endPing - startPing;

			// Generate new ping embed
			var pingMsg2 = generateEmbed("#cc3d32", ":ping_pong: Pong!", embedAuthor, embedLink, embedImg, "Your ping was " + diffPing + "ms!", `Generated by ${author.username}#${author.discriminator}`, author.displayAvatarURL({ dynamic: true }));
			// Edit sent message to have new ping embed
      sentMessage.edit(pingMsg2);
    })
  } else if (command === 'ping3noembed') {
		// Get current date as number to calculate ping
		var startPing = Date.now();
		// Generate ping message
		var pingMsg1 = 'pinging'

		// Edit sent message
		message.channel.send(pingMsg1).then((sentMessage) => {
			// Calculate ping
			var endPing = Date.now();
			var diffPing = endPing - startPing;
			// Edit sent message to have new ping embed
      sentMessage.edit(diffPing + " ms");
    })
	} else if (command === 'invite') {
    message.channel.send('https://discord.com/oauth2/authorize?client_id=789205620367818762&scope=bot')
  } else {
	  message.channel.send(`use ${prefix}ping1, ${prefix}ping2, ${prefix}ping3embed, or ${prefix}ping3noembed`)
  }
});

try {
  check()
  client.login(token);
} catch (error) {
  process.exit(125)  
}

